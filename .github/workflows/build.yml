name: Arcalm Linux Builder

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check.outputs.new_version }}
      arch_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get ISO version
        id: get_version
        run: |
          curl -sL https://mirrors.edge.kernel.org/archlinux/iso/latest/sha256sums.txt -o sha256sums.txt
          ISO_NAME=$(grep -oP 'archlinux-\K\d{4}\.\d{2}\.\d{2}(?=-x86_64.iso)' sha256sums.txt | head -1)
          echo "version=$ISO_NAME" >> $GITHUB_OUTPUT

      - name: Check releases
        id: check
        run: |
          API_RESPONSE=$(curl -sfH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" || echo 'null')
          LATEST_RELEASE_TAG=$(jq -r .tag_name <<< "$API_RESPONSE")
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"

          if [[ "$LATEST_RELEASE_TAG" != "$CURRENT_VERSION" ]] || [[ "$API_RESPONSE" == 'null' ]]; then
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "::notice::New version detected: $CURRENT_VERSION"
          else
            echo "new_version=false" >> $GITHUB_OUTPUT
            echo "::notice::No new version available"
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.new_version == 'true'
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify repository structure
        run: |
          echo "Workspace content:"
          ls -la .
          echo "Calamares configs:"
          ls -la calamares
          echo "Checking paths:"
          echo "Calamares directory: $(realpath calamares)"
          echo "customize_airootfs.sh path: $(realpath airootfs/root/customize_airootfs.sh)"

      - name: Setup environment
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm archiso sudo git base-devel jq reflector edk2-ovmf
          useradd -m builduser
          mkdir -p /build /work /out
          chown -R builduser:builduser /build /work /out
          echo 'Server = https://mirrors.kernel.org/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist

      - name: Prepare ISO config
        run: |
          cp -r /usr/share/archiso/configs/releng /build/custom-archiso
          cd /build/custom-archiso

          # Настройка репозиториев
          echo "[core]
CompressXZ = true
CleanMethod = KeepCurrent
" > pacman.conf

          echo "[multilib]
Include = /etc/pacman.d/mirrorlist" >> pacman.conf

          echo "[extra]
Include = /etc/pacman.d/mirrorlist" >> pacman.conf

          echo "[community]
Include = /etc/pacman.d/mirrorlist" >> pacman.conf

          # Генерация mirrorlist
          reflector --latest 20 --sort rate --protocol https --save /etc/pacman.d/mirrorlist
          echo "::notice::Generated mirrorlist with top 20 mirrors"

          # Замена брендинга
          find . -type f -exec sed -i \
            -e 's/Arch Linux/Arcalm Linux/g' \
            -e 's/archlinux/arcalm/g' \
            -e 's/ARCH_/ARCALM_/g' {} \;

          # Добавление пакетов
          echo -e "calamares\nqt5-xmlpatterns\nkpmcore\nxorg-xinit\nsddm\nplasma-meta\nkde-applications-meta\nnetworkmanager\ngrub\nefibootmgr\nxdg-desktop-portal-kde\ncalamares-settings\npartition\nwelcome\nuser\nkeymap" >> packages.x86_64

          # Копирование конфигов Calamares
          mkdir -p airootfs/etc/calamares
          cp -rv "/__w/arcalm/arcalm/calamares"/* airootfs/etc/calamares/ || { echo "::error::Missing Calamares config directory!"; exit 1; }

          # Копирование скрипта
          mkdir -p airootfs/root
          cp -v "/__w/arcalm/arcalm/airootfs/root/customize_airootfs.sh" airootfs/root/ || echo "::warning::Customize script not found, skipping"
          chmod +x airootfs/root/customize_airootfs.sh

          # Настройка метки ISO
          echo "MKISOFS_ARGS=\"-V ARCALM_$(${DATE:+date +%Y.%m.%d})\"" >> config.sh

      - name: Build ISO
        run: |
          mkarchiso -v -w /work -o /out /build/custom-archiso
          ISO_FILE=$(ls /out/*.iso)
          echo "ISO_FILE=$ISO_FILE" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.arch_version }}
          name: "Arcalm Linux ${{ needs.check-version.outputs.arch_version }}"
          body: "Custom Arch-based Linux with Calamares installer"
          files: ${{ env.ISO_FILE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old releases
        if: success()
        run: |
          mapfile -t releases < <(
            curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" | jq -r '.[].id'
          )
          if [ "${#releases[@]}" -gt 3 ]; then
            for release_id in "${releases[@]:3}"; do
              curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            done
          fi