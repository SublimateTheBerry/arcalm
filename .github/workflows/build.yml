name: Arcalm Linux Builder

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check.outputs.new_version }}
      arch_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get ISO version
        id: get_version
        run: |
          curl -sL https://mirrors.edge.kernel.org/archlinux/iso/latest/sha256sums.txt -o sha256sums.txt
          ISO_NAME=$(grep -oP 'archlinux-\K\d{4}\.\d{2}\.\d{2}(?=-x86_64.iso)' sha256sums.txt | head -1)
          echo "version=${ISO_NAME}" >> $GITHUB_OUTPUT

      - name: Check releases
        id: check
        run: |
          API_RESPONSE=$(curl -sfH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" || echo 'null')
          LATEST_RELEASE_TAG=$(jq -r .tag_name <<< "$API_RESPONSE")
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"

          if [[ "$API_RESPONSE" == 'null' ]] || [[ "$LATEST_RELEASE_TAG" != "$CURRENT_VERSION" ]]; then
            echo "new_version=true" >> $GITHUB_OUTPUT
          else
            echo "new_version=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.new_version == 'true'
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: false
          fetch-depth: 0

      - name: Verify repository structure
        run: |
          echo "Workspace content:"
          ls -la .
          echo "Calamares configs:"
          ls -la calamares
          echo "Checking paths:"
          echo "Calamares directory: $(realpath calamares)"
          echo "customize_airootfs.sh path: $(realpath airootfs/root/customize_airootfs.sh)"

      - name: Setup environment
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm archiso base-devel git reflector rsync sudo jq
          useradd -m -G wheel builduser
          echo 'builduser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
          mkdir -p /build /work /out
          chown -R builduser:builduser /build /work /out

      - name: Prepare ISO config
        run: |
          sudo sh -c '
            cp -r /usr/share/archiso/configs/releng /build/custom-archiso
            chown -R builduser:builduser /build/custom-archiso
            cd /build/custom-archiso

            # Update mirrorlist for the custom profile
            reflector --latest 20 --sort rate --protocol https --save /build/custom-archiso/airootfs/etc/pacman.d/mirrorlist
            pacman -Syu --noconfirm
          '

          sudo -u builduser sh -c '
            cd /build/custom-archiso
            
            # Replace branding
            find . -type f -exec sed -i -e "s/Arch Linux/Arcalm Linux/g" {} \;
            find . -type f -exec sed -i -e "s/archlinux/arcalm/g" {} \;
            find . -type f -exec sed -i -e "s/ARCH_/ARCALM_/g" {} \;
            
            # Add packages (ensure community repo is enabled in pacman.conf)
            echo "calamares" >> packages.x86_64
            echo "qt5-xmlpatterns" >> packages.x86_64
            echo "kpmcore" >> packages.x86_64
            echo "plasma-meta" >> packages.x86_64
            echo "kde-applications" >> packages.x86_64
            echo "networkmanager" >> packages.x86_64
            echo "grub" >> packages.x86_64
            echo "efibootmgr" >> packages.x86_64
            echo "xdg-desktop-portal-kde" >> packages.x86_64
            
            # Copy Calamares configs
            mkdir -p airootfs/etc/calamares
            cp -rv "/__w/arcalm/arcalm/calamares"/* airootfs/etc/calamares/ || { echo "Calamares config not found"; exit 1; }
            
            # Add customization script
            mkdir -p airootfs/root
            cp -v "/__w/arcalm/arcalm/airootfs/root/customize_airootfs.sh" airootfs/root/ || true
            chmod +x airootfs/root/customize_airootfs.sh
            
            # ISO configuration
            echo "MKISOFS_ARGS=\"-V ARCALM_$(date +%Y%m%d)\"" >> config.sh
          '

      - name: Build ISO
        run: |
          sudo mkarchiso -v -w /work -o /out /build/custom-archiso
          ISO_FILE=$(ls /out/*.iso)
          echo "ISO_FILE=$ISO_FILE" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.check-version.outputs.arch_version }}"
          name: "Arcalm Linux ${{ needs.check-version.outputs.arch_version }}"
          body: "Custom Arch-based Linux with Calamares installer\n\nBuilt with Plasma Desktop and KDE Applications"
          files: ${{ env.ISO_FILE }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old releases
        if: success()
        run: |
          mapfile -t releases < <(
            curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" | jq -r '.[].id'
          )
          if [ "${#releases[@]}" -gt 3 ]; then
            for release_id in "${releases[@]:3}"; do
              curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            done
          fi